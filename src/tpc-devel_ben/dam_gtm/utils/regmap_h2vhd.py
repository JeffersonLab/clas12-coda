import re
import datetime

def preamble_vhd(vhd_f, number_of_regs):
    line  = "\n-- Autogenerated on %s\n" % (str(datetime.datetime.now()))
    line += "-- by regmap_h2vhd.py\n\n"
    line += "library ieee;\n"
    line += "use ieee.std_logic_1164.all;\n\n"
    line += "package si5345_register_pkg is\n"
    line += "  type ROM_REC_T is record\n"
    line += "      reg  : std_logic_vector(15 downto 0);\n"
    line += "      data : std_logic_vector(7 downto 0);\n"
    line += "  end record;\n"
    line += "  type ROM_ARRAY_T is array (0 to %i) of ROM_REC_T;\n\n" % (number_of_regs-1)
    line += "  constant SI5345_ROM : ROM_ARRAY_T := ( \n"

    vhd_f.write(line)

def epilogue_vhd(vhd_f):
    line  = "\nend package si5345_register_pkg;\n"

    vhd_f.write(line)

def process_h(h_fname, vhd_fname):
    reg_data_flg = False
    idx = 0
    line_cnt = 0
    vhd_f = open(vhd_fname, "w")


    with open(h_fname, 'rb') as f:
        for line in f:
            line_cnt += 1
            line = line.decode(errors='replace').strip()

            if (len(line) == 0):
                continue

            if (("/*" in line) or ("*" in line)):
                vhd_f.write("-- %s\n" % (line[2:].strip()))
                continue

            if ("#define" in line and "NUM_REGS" in line):
                total_regs = int(line.split()[2])

            if ("si5345_revd_register_t const si5345_revd_registers" in line):
                preamble_vhd(vhd_f, total_regs)
                reg_data_flg = True
                continue

            if (reg_data_flg):
                if ("{" in line and "}" in line):
                    reg_data = line.split('{', 1)[1].split('}')[0]
                    reg_data = reg_data.split(",")
                    addr = int(reg_data[0], 16)
                    data = int(reg_data[1], 16)

                    vhd_line = "    %03i => (reg => x\"%04x\", data => x\"%02x\")" % (idx, addr, data)

                    idx += 1

                if (line[0] == "{" and len(line) == 1):
                    continue
                if ("};" in line):
                    reg_data_flg = False
                    # Padding...
                    while (idx < total_regs):
                        vhd_line += ",\n"
                        vhd_line += "    %03i => (reg => x\"%04x\", data => x\"%02x\")" % (idx, 0x00, 0x00)
                        if (idx < total_regs-1):
                            vhd_line += ",\n"
                        vhd_f.write(vhd_line)
                        vhd_line = ""
                        idx += 1

                    vhd_line += "\n  );\n"
                    vhd_f.write(vhd_line)
                elif (idx < total_regs):
                    vhd_line += ",\n"
                    vhd_f.write(vhd_line)

    epilogue_vhd(vhd_f)
    vhd_f.close()

if (__name__ == "__main__"):
    import sys
    #process_h("Si5345-RevD-jk-Registers.h", "../si5345_register_pkg.vhd")
    process_h(sys.argv[1], sys.argv[2])

