#define _POSIX_SOURCE  /* for kill() */

#include <stdlib.h>
#include <stdio.h>

#include <unistd.h>    /* for fork, exec, kill */
#include <sys/types.h> /* for pid_t            */
#include <sys/wait.h>  /* for waitpid          */
#include <signal.h>    /* for SIGTERM, SIGKILL */

/*
 * fork a child process, execute vlc, and return it's pid.
 * returns -1 if fork failed.
 */
pid_t spawn_vlc(void)
{
    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        return -1;
    }

    /* when you call fork(), it creates two copies of your program:
     * a parent, and a child. you can tell them apart by the return
     * value from fork().  If fork() returns 0, this is is the child
     * process.  If fork() returns non-zero, we are the parent and the
     * return value is the PID of the child process. */
    if (pid == 0) {
        /* this is the child process.  now we can call one of the exec
         * family of functions to execute VLC.  when you call exec,
         * it replaces the currently running process (the child process)
         * with whatever we pass to exec.  So our child process will now
         * be running VLC.  exec() will never return except in an error
         * case, since it is now running the VLC code and not our code. */
        execlp("vlc", "vlc", (char*)NULL);
        perror("vlc");
        abort();

    } else {
        /* parent, return the child's PID back to main. */
        return pid;
    }
}


int main(int argc, char* argv[])
{
    pid_t vlc = spawn_vlc();

    if (vlc == -1) {
        fprintf(stderr, "failed to fork child process\n");
        return 0;
    }

    printf("spawned vlc with pid %d\n", vlc);

    sleep(3);

    /* kill will send the specified signal to the specified process.
     * in this case, we send a TERM signal to VLC, requesting that it
     * terminate.  If that doesn't work, we send a KILL signal.
     * If that doesn't work, we give up. */
    if (kill(vlc, SIGTERM) < 0) {
        perror("kill with SIGTERM");
        if (kill(vlc, SIGKILL) < 0) {
            perror("kill with SIGKILL");
        }
    }

    /* this shows how we can get the exit status of our child process.
     * it will wait for the the VLC process to exit, then grab it's return
     * value. */
    int status = 0;
    waitpid(vlc, &status, 0);
    printf("VLC exited with status %d\n", WEXITSTATUS(status));

    return 0;
}
