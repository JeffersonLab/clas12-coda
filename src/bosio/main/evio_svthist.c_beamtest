
/* evio_svthist.c */
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#undef DEBUG_SEARCH

#define DEBUG
 
#define NWPAWC 10000000 /* Length of the PAWC common block. */
#define LREC 1024      /* Record length in machine words. */

struct {
  float hmemor[NWPAWC];
} pawc_;


#define MAXEVENTS 20000000

#define MAXBUF 10000000
unsigned int buf[MAXBUF];

#define SWAP32(x) ( (((x) >> 24) & 0x000000FF) | \
                    (((x) >> 8)  & 0x0000FF00) | \
                    (((x) << 8)  & 0x00FF0000) | \
                    (((x) << 24) & 0xFF000000) )

#define PRINT_BUFFER \
  b08 = start; \
  while(b08<end) \
  { \
    GET32(tmp); \
    printf("== 0x%08x\n",tmp); \
  } \
  b08 = start

/*
static int svt_peds[7][3][5][128];
*/

#define GET8(ret_val) \
  ret_val = *b08++

#define GET16(ret_val) \
  b16 = (unsigned short *)b08; \
  ret_val = *b16; \
  b08+=2

#define GET32(ret_val) \
  b32 = (unsigned int *)b08; \
  ret_val = *b32; \
  b08+=4

#define GET64(ret_val) \
  b64 = (unsigned long long *)b08; \
  ret_val = *b64; \
  b08+=8

int
evNlink(unsigned int *buf, int frag, int tag, int num, int *nbytes)
{
  int ii, len, nw, tag1, pad1, typ1, num1, len2, pad3, ind;
  int right_frag = 0;


#ifdef DEBUG_SEARCH
  printf("0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x\n",
		 buf[0],buf[1],buf[2],buf[3],buf[4],buf[5]);
  printf("%d %d %d %d %d %d\n",
		 buf[0],buf[1],buf[2],buf[3],buf[4],buf[5]);
#endif

  len = buf[0]+1;
  ii = 2;
  while(ii<len)
  {
    nw = buf[ii] + 1;
    tag1 = (buf[ii+1]>>16)&0xffff;
    pad1 = (buf[ii+1]>>14)&0x3;
    typ1 = (buf[ii+1]>>8)&0x3f;
    num1 =  buf[ii+1]&0xff;
#ifdef DEBUG_SEARCH
    printf("[%5d] nw=%d, tag1=0x%04x, pad1=0x%02x, typ1=0x%02x, num1=0x%02x\n",ii,nw,tag1,pad1,typ1,num1);
#endif
    /*check if it is right fragment*/
    if(typ1==0xe || typ1==0x10)
	{
      if(tag1==frag)
      {
#ifdef DEBUG_SEARCH
        printf("right frag\n");
#endif
        right_frag = 1;
      }
	  else
      {
#ifdef DEBUG_SEARCH
        printf("wrong frag\n");
#endif
        right_frag = 0;
      }
    }

#ifdef DEBUG_SEARCH
    printf("search ==> %d=1?  %d=%d?  %d=%d?\n",right_frag,tag1,tag,num1,num);
#endif
    if(typ1!=0xe && typ1!=0x10) /*assumes there are no bank-of-banks inside fragment, will redo later*/
	{
    if( right_frag==1 && tag1==tag && num1==num )
    {
      if(typ1!=0xf)
	  {
#ifdef DEBUG_SEARCH
        printf("return primitive bank data index %d\n",ii+2);
#endif
        *nbytes = (nw-2)<<2;
        return(ii+2);
	  }
      else
      {
        len2 = (buf[ii+2]&0xffff) + 1; /* tagsegment length (tagsegment contains format description) */
        ind = ii + len2+2; /* internal bank */
        pad3 = (buf[ind+1]>>14)&0x3; /* padding from internal bank */
#ifdef DEBUG_SEARCH
		printf(">>> found composite bank: tag=%d, type=%d, exclusive len=%d (padding from internal bank=%d)\n",((buf[ii+2]>>20)&0xfff),((buf[ii+2]>>16)&0xf),len2-1,pad3);
        printf("return composite bank data index %d\n",ii+2+len2+2);
#endif
        *nbytes = ((nw-(2+len2+2))<<2)-pad3;
#ifdef DEBUG_SEARCH
		printf(">>> nbytes=%d\n",*nbytes);
#endif
        return(ii+2+len2+2);
      }
    }
	}

    if(typ1==0xe || typ1==0x10) ii += 2; /* bank of banks */
    else ii += nw;
  }

  return(0);
}

#define ABS(x) ((x) < 0 ? -(x) : (x))

#define DATA_TYPE_BLKHDR		0x00
#define DATA_TYPE_BLKTLR		0x01
#define DATA_TYPE_EVTHDR		0x02
#define DATA_TYPE_TRGTIME		0x03
#define DATA_TYPE_BCOTIME		0x04
#define DATA_TYPE_FSSREVT		0x08
#define DATA_TYPE_DNV			0x0E
#define DATA_TYPE_FILLER		0x0F

#define NCHAN 256 /*how many channels to draw*/

int
main(int argc, char **argv)
{
  FILE *fd = NULL;
  int bco1[256], bco2[256], bco3[256], bco4[256], nbco1, nbco2, nbco3, nbco4, diff, diff1, diff2;
  char fname[1024];
  int handler, status, ifpga;
  unsigned long long *b64, timestamp;
  unsigned int *b32;
  unsigned short *b16;
  unsigned char *b08;
  int trig,chan,fpga,apv,hybrid;
  int i1, type, timestamp_flag;
  float f1,f2;
  unsigned int word;

  int nr,sec,layer,strip,nl,ncol,nrow,i,j,ii,jj,kk,l,l1,l2,ichan,nn,iev,nbytes,ind1;
  char title[128];
  char *HBOOKfile = "svthist.his";
  int nwpawc,lun,lrec,istat,icycle,idn,nbins,nbins1,igood,offset;
  float x1,x2,y1,y2,ww,tmpx,tmpy,ttt,ref;

  if(argc != 2)
  {
    printf("Usage: evio_fadc250hist <evio_filename>\n");
    exit(1);
  }

  nwpawc = NWPAWC;
  hlimit_(&nwpawc);
  lun = 11;
  lrec = LREC;
  hropen_(&lun,"NTUPEL",HBOOKfile,"N",&lrec,&istat,strlen("NTUPEL"),strlen(HBOOKfile),1);
  if(istat)
  {
    printf("\aError: cannot open RZ file %s for writing.\n", HBOOKfile);fflush(stdout);
    exit(0);
  }
  else
  {
    printf("RZ file >%s< opened for writing, istat = %d\n\n", HBOOKfile, istat);fflush(stdout);
  }




  nbins=256;
  x1 = 0.;
  x2 = 256.;
  ww = 0.;
  for(ii=1; ii<=1024; ii++)
  {
    idn = ii;
    sprintf(title,"bco%4d",ii);
    hbook1_(&idn,title,&nbins,&x1,&x2,&ww,strlen(title));
  }

  nbins=256;
  x1 = 0.;
  x2 = 256.;
  ww = 0.;
  for(ii=1025; ii<=1025; ii++)
  {
    idn = ii;
    sprintf(title,"bco sum");
    hbook1_(&idn,title,&nbins,&x1,&x2,&ww,strlen(title));
  }

  nbins=100;
  x1 = -50.;
  x2 = 50.;
  ww = 0.;
  for(ii=1031; ii<=1032; ii++)
  {
    idn = ii;
    sprintf(title,"pair difs");
    hbook1_(&idn,title,&nbins,&x1,&x2,&ww,strlen(title));
  }

  nbins=256;
  x1 = 0.;
  x2 = 256.;
  ww = 0.;
  for(ii=2001; ii<=2024; ii++)
  {
    idn = ii;
    sprintf(title,"pos%4d",ii);
    hbook1_(&idn,title,&nbins,&x1,&x2,&ww,strlen(title));
  }



  /*
  nbins=32;
  nbins1=32;
  x1 = 0.;
  x2 = 512.;
  y1 = 0.;
  y2 = 512.;
  ww = 0.;
  idn = 10;
  sprintf(title,"svt10");
  hbook2_(&idn,title,&nbins,&x1,&x2,&nbins1,&y1,&y2,&ww,strlen(title));
  */




  status = evOpen(argv[1],"r",&handler);
  if(status < 0)
  {
    printf("evOpen error %d - exit\n",status);
    exit(0);
  }

  for(iev=1; iev<MAXEVENTS; iev++)
  {

    if(!(iev%10000)) printf("\n\n\nEvent %d\n\n",iev);

    status = evRead(handler, buf, MAXBUF);
    if(status < 0)
	{
	  if(status==EOF) printf("end of file after %d events - exit\n",iev);
	  else printf("evRead error=%d after %d events - exit\n",status,iev);
      break;
    }

    if(iev < 3) continue; /*skip first 2 events*/

 
      if((ind1 = evNlink(buf, 5, 0xe104, 1, &nbytes)) > 0)
      {
        int half,chip,chan,bco,adc,chan1;
        unsigned char *end, *start;
        unsigned int tmp;
        unsigned int temp[6];
        unsigned sample[6];
        int oldslot = 100;
        int ndata0[22], data0[21][8];
        int baseline, sum, channel, ch1;
#ifdef DEBUG
        printf("ind1=%d, nbytes=%d\n",ind1,nbytes);fflush(stdout);
#endif
        start = b08 = (unsigned char *) &buf[ind1];
        end = b08 + nbytes;
#ifdef DEBUG
        printf("ind1=%d, nbytes=%d (from 0x%08x to 0x%08x)\n",ind1,nbytes,b08,end);fflush(stdout);
#endif


        timestamp_flag = 0;
        while(b08<end)
	    {
#ifdef DEBUG
          /*printf("begin while: b08=0x%08x\n",b08);*/
#endif
          GET32(word);
          if(timestamp_flag)
		  {
		    timestamp |= (word&0xffffff);
#ifdef DEBUG
		    printf(" {TRGTIME} timestamp=%lld\n",timestamp);fflush(stdout);
#endif
            timestamp_flag = 0;
			continue;
		  }

	      if(word & 0x80000000)
	      {
	        type = (word>>27)&0xF;
	        switch(type)
	        {
		      case DATA_TYPE_BLKHDR:
                nbco1=nbco2=nbco3=nbco4=0;
				for(chan=0; chan<256; chan++)
				{
                  bco1[chan] = 0;
                  bco2[chan] = 0;
                  bco3[chan] = 0;
                  bco4[chan] = 0;
				}
#ifdef DEBUG
		        printf(" {BLKHDR} SLOTID: %d", (word>>22)&0x1f);fflush(stdout);
		        printf(" NEVENTS: %d", (word>>11)&0x7ff);fflush(stdout);
		        printf(" BLOCK: %d\n", (word>>0)&0x7ff);fflush(stdout);
#endif
		        break;
		      case DATA_TYPE_BLKTLR:
				/*if(nbco1>0 && nbco2>0 && nbco3>0 && nbco4>0)*/
				if(nbco1==1 && nbco2==1 && nbco3==1 && nbco4==1)
				{
				  printf("/nEvent %d\n",iev);
				  /*for(chan=NCHAN-1; chan>=0; chan--)*/
				  for(chan=0; chan<NCHAN; chan++)
				  {
                    if(bco1[chan]) {printf("X");diff1=chan;}
                    else           printf("_");
				  }
                  printf("\n");

				  /*for(chan=NCHAN-1; chan>=0; chan--)*/
				  for(chan=0; chan<NCHAN; chan++)
				  {
                    if(bco2[chan]) {printf("X");diff2=chan;}
                    else           printf("_");
				  }
                  printf("\n");

				/*for(chan=NCHAN-1; chan>=0; chan--)*/
			    for(chan=0; chan<NCHAN; chan++)
			    {
                  if(bco4[chan]) {printf("X");diff1 = /*ABS*/(diff1-chan);}
                  else           printf("_");
		  	    }
                printf("\n");

				  for(chan=0; chan<NCHAN; chan++)
				  /*for(chan=NCHAN-1; chan>=0; chan--)*/
				  {
                    if(bco3[chan]) {printf("X");diff2 = /*ABS*/(diff2-chan);}
                    else           printf("_");
				  }
                  printf("\n");

				  printf("difs %d %d\n",diff1,diff2);

                  idn = 1031;
                  tmpx = (float)diff1;
	              ww = 1.;
	              hf1_(&idn,&tmpx,&ww);

                  idn = 1032;
                  tmpx = (float)diff2;
	              ww = 1.;
	              hf1_(&idn,&tmpx,&ww);


				}

#ifdef DEBUG
		        printf(" {BLKTLR} SLOTID: %d", (word>>22)&0x1f);fflush(stdout);
		        printf(" NWORDS: %d\n", (word>>0)&0x3fffff);fflush(stdout);
#endif
		        break;
		      case DATA_TYPE_EVTHDR:
#ifdef DEBUG
		        printf(" {EVTHDR} EVENT: %d\n", (word>>0)&0x7ffffff);fflush(stdout);
#endif
		        break;
		      case DATA_TYPE_TRGTIME:
		        timestamp = (((unsigned long long)word&0xffffff)<<24);
                timestamp_flag = 1;
		        break;
              case DATA_TYPE_BCOTIME:
#ifdef DEBUG
                printf(" {BCOTIME} START: %u STOP: %u\n", (word>>0) & 0xFF, (word>>16) & 0xFF);
#endif
                break;
		      case DATA_TYPE_FSSREVT:
                half = (word>>22)&0x1;
                chip = (word>>19)&0x7;
                chan = (word>>12)&0x7F;
                bco = (word>>4)&0xFF;
                adc = (word>>0)&0x7;
                idn = (chip<<7)+chan;
#ifdef DEBUG
		        printf(" {FSSREVT}");fflush(stdout);
		        printf(" HFCBID: %1u", (word>>22)&0x1);fflush(stdout);
		        printf(" CHIPID: %1u", (word>>19)&0x7);fflush(stdout);
		        printf(" CH: %3u", (word>>12)&0x7F);fflush(stdout);
		        printf(" BCO: %3u", (word>>4)&0xFF);fflush(stdout);
		        printf(" ADC: %1u\n", (word>>0)&0x7);fflush(stdout);
#endif

				if(1)
				{
          		  idn = chan+((chip-1)<<7)+(half<<9);
                  tmpx = (float)bco;
	              ww   = 1.;
#ifdef DEBUG
				  printf("idn=%d tmpx=%f\n",idn,tmpx);
#endif
	              hf1_(&idn,&tmpx,&ww);
                  idn = 1025;
	              hf1_(&idn,&tmpx,&ww);
				}

				/*
                if(chan<NCHAN)
				{
                  if(half==0)
				  {
                    if(chip==1)      {nbco1++; ch1=chan;     bco1[ch1] = bco;}
                    else if(chip==2) {nbco1++; ch1=chan+128; bco1[ch1] = bco;}
                    else if(chip==3) {nbco2++; ch1=chan;     bco2[ch1] = bco;}
				    else             {nbco2++; ch1=chan+128; bco2[ch1] = bco;}
				  }
                  else
				  {
                    if(chip==1)      {nbco3++; ch1=chan;     bco3[ch1] = bco;}
                    else if(chip==2) {nbco3++; ch1=chan+128; bco3[ch1] = bco;}
                    else if(chip==3) {nbco4++; ch1=chan;     bco4[ch1] = bco;}
				    else             {nbco4++; ch1=chan+128; bco4[ch1] = bco;}
				  }
				}
				*/

#ifdef DEBUG
				printf("[%1d][%1d][%3d] bco=%3d adc=%1d (%d %d %d %d)\n",half,chip,chan,bco,adc,bco1[ch1],bco2[ch1],bco3[ch1],bco4[ch1]);fflush(stdout);
#endif
		        break;
		      case DATA_TYPE_DNV:
		        printf(" {***DNV***}\n");fflush(stdout);
                goto exit;
		        break;
		      case DATA_TYPE_FILLER:
#ifdef DEBUG
		        printf(" {FILLER}\n");fflush(stdout);
#endif
		        break;
		      default:
		        printf(" {***DATATYPE ERROR***}\n");fflush(stdout);
                goto exit;
		        break;
	        }
	      }
#ifdef DEBUG
	      else
	      {
	        printf("\n");fflush(stdout);
	      }
#endif


#ifdef DEBUG
          /*printf("end loop: b08=0x%08x\n",b08);*/
#endif
	    }
exit:
		;
      }







	;




  }

  printf("evClose after %d events\n",iev);fflush(stdout);
  evClose(handler);

  idn = 10;
  hprint_(&idn);

  /* closing HBOOK file */
  idn = 0;
  printf("befor hrout_\n");fflush(stdout);
  hrout_(&idn,&icycle," ",1);
  printf("after hrout_\n");fflush(stdout);
  hrend_("NTUPEL", 6);
  printf("after hrend_\n");fflush(stdout);

  exit(0);
}
