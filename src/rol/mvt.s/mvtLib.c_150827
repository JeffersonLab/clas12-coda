
/******************************************************************************
*
*  mvtLib.h  - Library implementation file for readout of the Clas12 MVT & FTT
*                
*  Author: Yassir.Moudden@cea.fr 
*          Irakli.Mandjavidze@cea.fr
*          June 2015
*
*  Revision  1.0 - Initial Revision
*                  2015/08/27: mvtUploadAll added
*
*  SVN: $Rev$
*
******************************************************************************/

#if defined(Linux_vme)

#include <stdio.h>

#include "mvtLib.h"
#include "SysConfig.h"
#include "ReturnCodes.h"
#include "BeuConfig.h"

// For the moment an ugly declaration
extern SysParams *sys_params_ptr;					// DEFINED IN SysConfig.h

int static num_of_beu;
int beu_id2slot[DEF_MAX_NB_OF_BEU];

/*
 *
 */
int mvtInit(unsigned int addr, unsigned int addr_inc, int nfind, int iFlag) 
{
	int ret;
	char conf_file_name[128];
	int bec_id;
	int bec;
	int beu;

	bec_id = iFlag;
	num_of_beu = 0;

 	/*--------------------*/
	/* SysConfig (start)  */
	/*--------------------*/
	// Set up config file name
	sprintf(conf_file_name, "%s", "/home/daq/Software/SysConfig/Implementation/Projects/Software/CentOs/bin/Mvt.cfg");  
	if( (ret=SysConfigFromFile(conf_file_name)) != D_RetCode_Sucsess )
	{
		fprintf( stderr, "%s: SysConfigFromFile failed for file %s with %d\n", __FUNCTION__, conf_file_name, ret );
		SysConfig_CleanUp();
		fprintf( stdout, "%s: **** Failed ****\n", __FUNCTION__ );
//		daLogMsg("ERROR","%s: SysConfigFromFile failed for file %s with %d", __FUNCTION__, conf_file_name, ret);
		return( ret );
	}
	/*-------------------------------------------------*/
	/* SysConfig (end)       */
	/*-------------------------------------------------*/ 
	fprintf(stdout, "%s: **** end ****\n", __FUNCTION__);

	// Go through back end crates
	for( bec=1; bec<DEF_MAX_NB_OF_BEC; bec++ )
	{
		if( sys_params_ptr->Bec_Params[bec].Crate_Id == bec_id )
		{ 
			for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )
			{
				if( sys_params_ptr->Bec_Params[bec].Beu_Id[beu] > 0 )
				{
					beu_id2slot[num_of_beu]=sys_params_ptr->Bec_Params[bec].Beu_Slot[beu];
					num_of_beu++;
 				}
			}
		} // if( sys_params_ptr->Bec_Params[bec].Crate_Id == id )
	} // for( bec=1; bec<DEF_MAX_NB_OF_BEC; bec++ )

	return num_of_beu;
}

/*
 *
 */
int mvtSlot( int id ) 
{
	if( (id < 0) || (num_of_beu <= id) )
	{
		fprintf( stderr, "%s: requested ID=%d out of range [0;%d]; num_of_beu =%d\n", __FUNCTION__, id, num_of_beu-1, num_of_beu );
		return -1;
	}
	return beu_id2slot[id];
}

/*
 * 
 */
int mvtDownload()
{
	int ret;
	char conf_file_name[128];

 	/*--------------------*/
	/* SysConfig (start)  */
	/*--------------------*/
	// Set up config file name
        sprintf(conf_file_name, "%s", "/home/daq/Software/SysConfig/Implementation/Projects/Software/CentOs/bin/Mvt.cfg");
	if( (ret=SysConfigFromFile(conf_file_name)) != D_RetCode_Sucsess )
	{
		fprintf( stderr, "%s: SysConfigFromFile failed for file %s with %d\n", __FUNCTION__, conf_file_name, ret );
		SysConfig_CleanUp();
		fprintf( stdout, "%s: **** Failed ****\n", __FUNCTION__ );
		return( ret );
	}
	/*-------------------------------------------------*/
	/* SysConfig (end)       */
	/*-------------------------------------------------*/ 
	fprintf(stdout, "%s: **** end ****\n", __FUNCTION__);

	return(1);
}

/*
 * 
 */
int mvtPrestart()
{
	int ret;

	fprintf(stdout, "%s: **** starting ****\n", __FUNCTION__);

	// Set system in Running state
	if( (ret=SysRun()) != D_RetCode_Sucsess )
	{
		fprintf( stderr, "%s: SysRun failed with %d\n", __FUNCTION__, ret );
		SysConfig_CleanUp();
		return(ret);
	}

	fprintf(stdout, "%s: **** end ****\n", __FUNCTION__);
	return(0);
}

/*
 * 
 */
int mvtGo()
{
	int ret;

	fprintf(stdout, "%s: **** starting ****\n", __FUNCTION__);

	// Synchronize and Enable trigger processing
	if( (ret=SysGo()) != D_RetCode_Sucsess )
	{
		fprintf( stderr, "%s: SysGo failed with %d\n", __FUNCTION__, ret );
		SysConfig_CleanUp();
		return(ret);		
	}
	fprintf(stdout, "%s: **** end ****\n", __FUNCTION__);

 	// If the multi board block transfer is requested
	if( sys_params_ptr->Bec_Params[1].BaseAdr_A32m_Com_Enb )
	{
		// Give the token to the first board in advance
		// the index of the control register must point to the board in smolest slot number
		// TBD: during configuration remember the smalles slot index and use it 
		beusspTakeToken(beu_reg_control[2]); // to the board with the samllest slot number.
	}
	return(0);
}

/*
 * 
 */
int mvtEnd()
{
	int ret;

	fprintf(stdout, "%s: **** starting ****\n", __FUNCTION__);

	// Set system in Idle state
	if( (ret=SysStop()) != D_RetCode_Sucsess )
	{
		fprintf( stderr, "%s: SysStop failed with %d\n", __FUNCTION__, ret );
		SysConfig_CleanUp();
		return(ret);
	}

	fprintf(stdout, "%s: **** end ****\n", __FUNCTION__);
	return(0);
}

/*
 * 
 */
int mvtGBReady(int id)
{
	unsigned int readme;
	unsigned int tokenstatus;
	int slot_flag = 0;
	int bec, beu;

	// Go through back end crates
	for( bec=1; bec<DEF_MAX_NB_OF_BEC; bec++ )
	{
		if( sys_params_ptr->Bec_Params[bec].Crate_Id == id )
		{ 
			for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )
			{
				if( sys_params_ptr->Bec_Params[bec].Beu_Id[beu] > 0 )
				{
 					// If the multi board block transfer is requested
					if( sys_params_ptr->Bec_Params[bec].BaseAdr_A32m_Com_Enb )
					{
						if( sys_params_ptr->Bec_Params[bec].Beu_Mblk_Rank[beu] == MblkRank_First )
							tokenstatus = beusspGetTokenStatus(beu_reg_control[beu]);
							if( (tokenstatus & 0x80000000) == 0 )
								return 0;
					}
					// Check if beu-s are ready
					readme = beusspBReady(beu_reg_control[beu]);
					if( readme & 0x00010000 )
						slot_flag |= (1<<sys_params_ptr->Bec_Params[bec].Beu_Slot[beu]);
 				}
			}
		} // if( sys_params_ptr->Bec_Params[bec].Crate_Id == id )
	} // for( bec=1; bec<DEF_MAX_NB_OF_BEC; bec++ )
	return( slot_flag );
}

/*
 * 
 */
#define MAX_EVENT_LENGTH MAX_BLOCK_LENGTH
int mvtReadBlock(int id, unsigned int *data, int nwrds, int rflag)
{
	int len = 0;
	int dCnt;
	unsigned int blocksize;
	int first_beu = -1;
	int bec, beu;

	// Go through back end crates
	for( bec=1; bec<DEF_MAX_NB_OF_BEC; bec++ )
	{
		if( sys_params_ptr->Bec_Params[bec].Crate_Id == id )
		{ 
			//set bzrd high ( acknowledge )
			for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )
			{
				if( sys_params_ptr->Bec_Params[bec].Beu_Id[beu] > 0 )
				{
					beusspBZRDHigh(beu_reg_control[beu]);
					if( sys_params_ptr->Bec_Params[bec].Beu_Mblk_Rank[beu] == MblkRank_First )
						first_beu = beu;
				}
			} // for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )

 			// If the multi board block transfer is requested
			if( sys_params_ptr->Bec_Params[1].BaseAdr_A32m_Com_Enb )
			{
				if( first_beu <= 0 )
				{
					fprintf(stderr, "%s: first_beu = %d in bec %d non valid\n", __FUNCTION__, first_beu, bec );
					return(first_beu);
				}
				dCnt = beusspTokenReadBlock(beu_reg_control[first_beu], BEUSSPmblk, data, (MAX_EVENT_LENGTH>>2)-1024, 1);

				// Forward: first board needs to take token 
				beusspTakeToken(beu_reg_control[first_beu]);

				if(dCnt<=0)
				{
					fprintf(stderr, "%s: beusspTokenReadBlock failed for in bec %d with first_beu %d with dCnt = %d\n", __FUNCTION__, bec, first_beu, dCnt);
					return(dCnt);
				}
				len = dCnt;
			}
			else
			{
				for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )
				{
					if( sys_params_ptr->Bec_Params[bec].Beu_Id[beu] > 0 )
					{
						beusspGetBlockSize(beu_reg_control[beu], &blocksize);		
						dCnt = beusspReadBlock(beu_reg_control[beu], beu_fifo[beu], data, blocksize, 1);
						if(dCnt<=0)
						{
							fprintf(stderr, "%s: beusspReadBlock failed for beu %d in bec %d with dCnt = %d\n", __FUNCTION__, beu, bec, dCnt);
							return(dCnt);
						}
						len += dCnt;
						data += dCnt;
					}
				} // for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )
 			}

			//set bzrd low ( acknowledge second step : fin relecture data bloc)
			for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )
			{
				if( sys_params_ptr->Bec_Params[bec].Beu_Id[beu] > 0 )
					beusspBZRDLow(beu_reg_control[beu]);
			} // for( beu=1; beu<DEF_MAX_NB_OF_BEU; beu++ )
		} // if( sys_params_ptr->Bec_Params[1].Crate_Id == id )
	} // for( bec=1; bec<DEF_MAX_NB_OF_BEC; bec++ )
	return(len);
}

/*
 *  CLEANUP
 */
int mvtCleanup()
{
	fprintf(stdout, "%s: **** starting ****\n", __FUNCTION__);
	SysConfig_CleanUp();
	fprintf(stdout, "%s: **** end ****\n", __FUNCTION__);
	return(0);
}

/*
 *  Upload MVT settings
 */
int mvtUploadAll( char *string, int length )
{
	char buf[128*1024];
	int ret;

	// Make sure a buffer was provided
	if( length == 0 )
		return 0;

	// Check for non negative buffer length
	if( length < 0 )
		return D_RetCode_Err_Wrong_Param;

 	// Check for Null pointer
	if( string == (char *)NULL )
	{
		fprintf( stderr, "%s: string=0\n", __FUNCTION__ );
		return D_RetCode_Err_Null_Pointer;
	}
	
	// First produce the ASCII representation of the MVT parameters structure 
	if( (ret = SysParams_Sprintf( sys_params_ptr, buf )) != D_RetCode_Sucsess )
	{
		fprintf( stderr, "%s: SysParams_Sprintf failed with  %d\n", __FUNCTION__, ret );
		return ret;
	}
	
	// Check that enough buffer has been provided
	if( length < strlen(buf) )
	{
		fprintf( stderr, "%s: not enough deep buffer of %d bytes; %d bytes needed\n", __FUNCTION__, length, strlen(buf) );
		return ret;
	}
	sprintf( string, "%s", buf );
	return( strlen(string) );
}

#endif // #if defined(Linux_vme)
