
/* gtp1.c - UNIX first readout list for gtp board */

#define DMA_TO_BIGBUF /*if want to dma directly to the big buffers*/

#define USE_GTP

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>

#include <sys/types.h>
#ifndef VXWORKS
#include <sys/time.h>
typedef      long long       hrtime_t;
#else
int sysClkRateGet();
#endif

#include "circbuf.h"


/*****************************/
/* former 'crl' control keys */

/* readout list GTP1 */
#define ROL_NAME__ "GTP1"

/* polling */
#define POLLING_MODE


/* name used by loader */
#define INIT_NAME gtp1__init

#include "rol.h"

void usrtrig(unsigned long, unsigned long);
void usrtrig_done();

/* test readout */
#include "TEST_source.h"

/************************/
/************************/

#include "coda.h"
#include "tt.h"

#ifdef USE_GTP
#include "vmeclient.h"
VMEClient *tcpvme = NULL;
#endif

static char rcname[5];

/*
long decrement;
extern long nevent;
*/

static void
__download()
{
  int res;

#ifdef POLLING_MODE
  rol->poll = 1;
#else
  rol->poll = 0;
#endif


  printf("\n>>>>>>>>>>>>>>> ROCID=%d, CLASSID=%d <<<<<<<<<<<<<<<<\n\n",rol->pid,rol->classid);

  printf("rol1: downloading DDL table ...\n");
  clonbanks_();
  printf("rol1: ... done.\n");

  /* Clear some global variables etc for a clean start */
  CTRIGINIT;

  /* init trig source TEST */
  TEST_INIT;
  /*CDOINIT(TIPRIMARY,TIR_SOURCE);*/

#ifdef USE_GTP
#endif

  printf("INFO: User Download 1 Executed\n");

  return;
}


static void
__prestart()
{
  int res;
  unsigned int nev, val;
  unsigned long jj, adc_id, sl;
  char *env;

  *(rol->nevents) = 0;

  /* Register a sync trigger source */
#ifdef POLLING_MODE
  CTRIGRSS(TEST, 1, usrtrig, usrtrig_done);
#else
  CTRIGRSA(TEST, 1, usrtrig, usrtrig_done);
#endif

  /* not needed here ??? */
  rol->poll = 1;


  sprintf(rcname,"RC%02d",rol->pid);
  printf("rcname >%4.4s<\n",rcname);


#ifdef USE_GTP
  if(tcpvme != NULL)
  {
    printf("000\n");fflush(stdout);
    res = tcpvme->DisconnectVME();
    if(res)
    {
      printf("ROL1: disconnected from dcrb1gtp\n");
    }
    else
    {
      printf("ROL1 ERROR: cannot disconnect from dcrb1gtp\n");
    }
  }
  else
  {
    printf("111\n");fflush(stdout);
    tcpvme = new VMEClient();
  }
  res = tcpvme->ConnectVME("dcrb1gtp",6003);
  printf("222\n");fflush(stdout);
  if(res)
  {
    printf("INFO: connected to dcrb1gtp\n");
  }
  else
  {
    printf("ERROR: cannot connect to dcrb1gtp\n");
  }

  tcpvme->VMEGTPReset();

  /*just to make sure presious command if executed*/
  tcpvme->VMEGTPEventCount(&nev);
  printf("GTP: nev=%d\n",nev);

  for(jj=0; jj<14; jj++)
  {
    tcpvme->VMERead32(0x1010+jj*256, &val);
	if(val&0x1000) printf("Link %d is UP\n",jj);
    else printf("Link %d is DOWN\n",jj);
  }

  /* set trigger multiplicity: second paramaters is the minimum number
  of hits in segment (2-6) */
  tcpvme->VMEWrite32(0x2004, 4);


#endif

  printf("INFO: User Prestart 1 executed\n");

  /* from parser (do we need that in rol2 ???) */
  *(rol->nevents) = 0;
  rol->recNb = 0;

  return;
}

static void
__end()
{
  int ii, total_count, rem_count, res;

  CDODISABLE(TEST,1,0);
  printf("ROL1: polling disabled\n");
  printf("ROL1: disconnecting\n");

  /* do not do that here: we maybe in the middle of polling in testttest()
     and gtpNFIFOEvents() was called and did not return yet; lets simply do not disconnect
#ifdef USE_GTP
  res = tcpvme->DisconnectVME();
  if(res)
  {
    printf("ROL1: disconnected from dcrb1gtp\n");
  }
  else
  {
    printf("ROL1 ERROR: cannot disconnect from dcrb1gtp\n");
  }
#endif
  */

  printf("ROL1: Executed\n");

  return;
}

static void
__pause()
{
  CDODISABLE(TEST,1,0);

  printf("INFO: User Pause 1 Executed\n");

  return;
}

static void
__go()
{
  char *env;

  CDOENABLE(TEST,1,1);

  printf("INFO: User Go 1 Executed\n");

  return;
}



#ifdef USE_GTP
unsigned int
gtpNFIFOEvents()
{
  unsigned int nev;
  tcpvme->VMEGTPEventCount(&nev);
  if(nev>0) printf("VMEGTPEventCount: nev=%d\n",nev);
  return(nev);
}
#endif

void
usrtrig(unsigned long EVTYPE, unsigned long EVSOURCE)
{
  long EVENT_LENGTH;
  int ii, len, blen, type, lock_key, *tmp;
  int *adrlen, *bufin, *bufout, i, ind, ind2, ncol, nrow, len2;
  unsigned int *buf, *dabufp1, *dabufp2;
  int *jw, *secondword;
  unsigned int count, wordcount;
  unsigned int word32, *vals;
  unsigned int NoAddressInc = 1;
#ifdef USE_GTP
  unsigned int nev, evnum;
#endif

  printf("usrtrig reached\n");fflush(stdout);


#ifdef VXWORKS
taskDelay(1000);
#else
/*sleep(1);*/
#endif


  rol->dabufp = NULL;

  CEOPEN(EVTYPE, BT_BANKS);

#ifdef USE_BOS
  jw = rol->dabufp;
  jw[-2] = 1;
  secondword = rol->dabufp - 1; /* pointer to the second CODA header word */
#endif



#ifdef USE_BOS
  /* open data bank */
  if((ind = bosMopen_(jw, rcname, 0, 1, 0)) <=0)
  {
    printf("bosMopen_ Error: %d\n",ind);
  }
  rol->dabufp += NHEAD;
#endif


#ifdef USE_GTP
  vals = (unsigned int *)rol->dabufp;
  printf("GetEvent\n");fflush(stdout);
  vals ++;
  tcpvme->VMEGTPGetEvent(&evnum, &wordcount, vals);
  printf("VMEGTPGetEvent: evnum=%d, wordcount=%d, vals=0x%08x 0x%08x 0x%08x 0x%08x\n",
      evnum, wordcount,vals[0],vals[1],vals[2],vals[3]);
  vals[-1] = evnum;
  rol->dabufp += wordcount+1;
#endif


  /*  
  wordcount = 100;
  len = wordcount;
  for(ii=0; ii<len; ii++)
  {
    *rol->dabufp++ = vals[ii];
  }
  */

#ifdef USE_BOS
  blen = rol->dabufp - (int *)&jw[ind+1];
  if(bosMclose_(jw,ind,1,blen) == 0)
  {
    printf("ERROR in bosMclose_ - space is not enough !!!\n");
  }
#endif

  CECLOSE;

  return;
}
  
void
usrtrig_done()
{
  return;
}  

void
__done()
{
  /* from parser */
  poolEmpty = 0; /* global Done, Buffers have been freed */

  return;
}
  
static void
__status()
{
  return;
}  
